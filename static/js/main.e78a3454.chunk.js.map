{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","reportWebVitals.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justifyContent","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","recovery","death","url","fecthData","country","a","dynamicUrl","axios","get","console","log","fecthDailyData","modifiedData","map","reportDate","total","date","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchApi","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","idx","App","setData","setCountry","fetchedData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e78a3454.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__GKiwZ\",\"card\":\"Cards_card__2ni1w\",\"infected\":\"Cards_infected__3CMrr\",\"recovery\":\"Cards_recovery__UhApC\",\"death\":\"Cards_death__1TSKD\"};","import React from 'react'\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css'\r\n\r\nfunction Cards({data:{confirmed, recovered, deaths, lastUpdate}}) {\r\n    \r\n    if(!confirmed) return <p>Loading...</p>\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={8} justifyContent=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={3} separator=\",\" />\r\n                            \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>        \r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovery)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovery</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={3} separator=\",\" />\r\n                            \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>        \r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.death)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={3} separator=\",\" />\r\n                            \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of death cause by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>                \r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fecthData = async (country)=>{\r\n\r\n    let dynamicUrl = url\r\n    if(country) dynamicUrl = `${url}/countries/${country}`\r\n\r\n    try{\r\n        const {data:{confirmed, recovered, deaths, lastUpdate}} = await axios.get(dynamicUrl)\r\n\r\n        return {confirmed, recovered, deaths, lastUpdate}\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fecthDailyData = async ()=>{\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        \r\n        const modifiedData = data.map(({confirmed, deaths, reportDate})=>({\r\n            confirmed: confirmed.total,\r\n            deaths: deaths.total,\r\n            date: reportDate\r\n        }))\r\n\r\n        return modifiedData\r\n\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async ()=>{\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`)\r\n        const modifiedData = countries.map(country => country.name)\r\n        return modifiedData\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n\r\n}","import {useState, useEffect} from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport {fecthDailyData} from '../../api'\r\nimport styles from './Chart.module.css'\r\n\r\nfunction Chart({data:{confirmed, recovered, deaths},country}) {\r\n\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(()=>{\r\n        let fetchApi = async ()=>{\r\n            setDailyData(await fecthDailyData())\r\n        }\r\n    \r\n        fetchApi()\r\n        return ()=>{\r\n            fetchApi=null\r\n        }\r\n    },[])\r\n\r\n    const lineChart = (\r\n        dailyData[0] \r\n        ? (<Line\r\n            data={{\r\n                labels: dailyData.map(({date})=> date),\r\n                datasets:[\r\n                    {\r\n                        data: dailyData.map(({confirmed})=> confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({deaths})=> deaths),\r\n                        label: 'deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,.5)',\r\n                        fill: true\r\n                    }\r\n                ]\r\n            }}\r\n        />) : null\r\n    )\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (<Bar\r\n            data={{\r\n                labels: ['Infected','Recovered','Deaths'],\r\n                datasets:[\r\n                    {\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0,0,255,.5)',\r\n                            'rgba(0,255,0,.5)',\r\n                            'rgba(255,0,0,.5)',\r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value]\r\n                    }\r\n                ]\r\n            }}\r\n\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display:true, text: `Current State in ${country}`}\r\n            }}\r\n        />) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            { country ? barChart: lineChart }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import {useEffect, useState} from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api'\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n\r\n    const [countries, setCountries] = useState([])\r\n\r\n    useEffect(()=>{\r\n        let fetchApi = async ()=>{\r\n            setCountries(await fetchCountries())\r\n        }\r\n\r\n        fetchApi()\r\n        return ()=>{\r\n            fetchApi = null\r\n        }\r\n    },[setCountries])\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={e=> handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {\r\n                    countries.map((country,idx)=>(<option key={idx} value={country}>{country}</option>))\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import {useEffect, useState} from 'react'\nimport {Cards, Chart, CountryPicker} from './components'\nimport {fecthData} from './api'\nimport styles from './App.module.css'\n\nfunction App() {\n\n  const [data, setData] = useState({})\n  const [country, setCountry] = useState('')\n\n  useEffect(()=>{\n    handleCountryChange()\n  },[])\n\n  const handleCountryChange = async(country=null)=>{\n    setCountry(country)\n    const fetchedData = await fecthData(country)\n    setData(fetchedData)\n  }\n\n  return (\n    <div className={styles.container}>\n      <Cards data={data} />\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data} country={country} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__uQQtp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1ZI-1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__254JM\"};"],"sourceRoot":""}